/* written by Sergey Litvinov <slitvinov@gmail.com> 
#  This program is free software; you can redistribute it and/or modify        
#  it under the terms of the GNU General Public License as published by        
#  the Free Software Foundation; either version 2 of the License, or           
#  (at your option) any later version.                
*/

/* Refer to
1.Hu, X. Y., Wang, Q. & Adams, N. A. An adaptive central-upwind
weighted essentially non-oscillatory scheme. Journal of Computational
Physics 229, 8952â€“8965 (2010).
*/

load("scheme2t.mac")$
load("revsum.mac")$
load("expr2c.mac")$

/* h(n) is a polynomial of the order of n */
h(n):= block([q, body: sum('a[i]*x^i, i, 0, n)],
  subst(body,  'q, lambda([x], q)))$

/* is defined by eq. (3) */
f(n):= block([q, body: 1/dx*integrate(h(n)(dzita), dzita, -dx/2+x, dx/2+x)],
  subst(body, 'q, lambda([x], q)))$

/* stencils from Fig. 1 */
S[0]: [-2, -1, 0]$
S[1]: [-1, 0,  1]$
S[2]: [0,  1,  2]$
S[6]: [-2, -1, 0, 1, 2, 3]$
klist: list_of_sub(S) $

/* get \hat{f} functions, eq. (7) */
for k in klist do (
  n: length(S[k])-1,
  eq: makelist ( (f(n))(q*dx) = f[i+q], q, S[k]),
  avar: delete(x, listofvars(h(n))),
  so: solve(eq, avar)[1],
  fhat[k]: subst(so, h(n))) $

/* show that eq (8) holds */
revsum(factor(expand(fhat[0](1/2*dx))));
revsum(factor(expand(fhat[1](1/2*dx))));
revsum(factor(expand(fhat[2](1/2*dx))));

/* show that we approximate a first derivative */
revsum(expand(scheme2t((fhat[0](1/2*dx) - fhat[0](-1/2*dx))/dx, i, 4)));
revsum(expand(scheme2t((fhat[1](1/2*dx) - fhat[1](-1/2*dx))/dx, i, 4)));
revsum(expand(scheme2t((fhat[2](1/2*dx) - fhat[2](-1/2*dx))/dx, i, 4)));

/* eq. (16) */
revsum(factor(expand(fhat[6](1/2*dx))));

/* get beta using eq. (11) */
for k in klist do (
  be[k]:   sum(dx^(2*j-1)*integrate(diff(fhat[k](x), x, j)^2,
        x, -dx/2, dx/2),
      j, 1, length(S[k]))) $

/* make sure the resulting scheme is of 5th order (use eq. (5) to approximate derivative) */
expr_aux: lsum(om[k]*fhat[k](dx/2), k, [0, 1, 2])$
expr: expand(-1/dx*scheme2t( expr_aux - subst(i-1, i, expr_aux), i, 4));

/* eq. (27) */
expand(1/6*scheme2t(be[0] + be[2] + 4*be[1], i, 3));
expand(scheme2t(be[6], i, 2));

/* to get the same form as in the paper ... */
expr: revsum(factor(12*be[6]))$

/* ready to "copy-pase" into c++ */
display2d: false;
expr2c(float(expand(expr)));